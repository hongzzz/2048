<style lang="less">
  .game {
    display: flex;
    flex-direction: column;
    align-items: center;
    .reset-button{
      background: #bbada0;
      color: #fff;
      font-size: medium;
    }
    .score {
      display: flex;
      justify-content: space-around;
      align-items: center;
      width: 540rpx;
      height: 120rpx;
      margin: 50rpx 0;
      border-radius: 8rpx;
      background: #bbada0;
      color: #fff;
      font-size: medium;
      text-align: center;
      .score-container {
        display: flex;
        justify-content: center;
        align-items: center;
        width: 40%;
        height: 70%;
        border-radius: 8rpx;
        background: #ccc0b3;
      }
    }
    .blocks {
      display: flex;
      justify-content: space-between;
      align-content: space-between;
      flex-wrap: wrap;
      background: #bbada0;
      width: 540rpx;
      height: 540rpx;
      padding: 20rpx;
      border-radius: 10rpx;
      .block {
        width: 120rpx;
        height: 120rpx;
        .number-container {
          display: flex;
          justify-content: center;
          align-items: center;
          width: 120rpx;
          height: 120rpx;
          border-radius: 8rpx;
          background: #ccc0b3;
          /*对应数字背景色*/
          &.n-2 {
            background: #eee4da;
          }
          &.n-4 {
            background: #ede0c8;
          }
          &.n-8 {
            background: #f2b179;
          }
          &.n-16 {
            background: #f59563;
          }
          &.n-32 {
            background: #f67c5f;
          }
          &.n-64 {
            background: #f65e3b;
          }
          &.n-128 {
            background: #edcf72;
          }
          &.n-256 {
            background: #edcc61;
          }
          &.n-512 {
            background: #9c0;
          }
          &.n-1024 {
            background: #33b5e5;
          }
          &.n-2048 {
            background: #09c;
          }
          &.n-4096 {
            background: #a6c;
          }
          &.n-8192 {
            background: #93c;
          }
          .number {
            font-family: Consolas Arial "Microsoft YaHei UI";
            font-weight: bold;
            font-size: 50rpx;
            text-align: center;
          }
        }
      }
    }
  }

</style>

<template>
  <view class="game">
    <button class="reset-button" @tap="reset">new game</button>
    <view class="score">
      <view class="score-container"><span>RECENT:{{recentScore}}</span></view>
      <view class="score-container"><span>BEST:{{bestScore}}</span></view>
    </view>
    <view class="blocks" @touchstart="handleTouchStart" @touchend="handleTouchEnd">
      <view class="block" wx:for="{{numbers}}" wx:key="{{index}}">
        <view class="{{['number-container', 'n-'+item]}}">
          <view wx:if="{{item!==0}}" class="number">{{item}}</view>
        </view>
      </view>
    </view>
  </view>
</template>

<script>
  import wepy from 'wepy'

  export default class game extends wepy.component {
    data = {
      numbers: [],
      recentScore: 0,
      bestScore: 0,
      scrollData: {}
    }

    // 初始化数组为0,读取最高分
    _init () {
      for (let i = 0; i < 16; i++) {
        this.numbers[i] = 0
      }
      this.recentScore = 0
      wepy.getStorage({key: 'bestScore'}).then((res) => {
        this.bestScore = res.data
        this.$apply()
      }).catch((err) => {
        console.log(err)
        this.bestScore = 0
        this.$apply()
      })
    }

    // 随机加入2或者4,比例1:9
    _randomAdd () {
      let index = 0
      let times = 0
      // 找一个不为0的位置
      while (times < 50) {
        index = Math.floor(Math.random() * 16)
        if (this.numbers[index] === 0) {
          break
        }
        times++
      }
      // 随机次数超过50则人工生成一个位置
      if (times === 50) {
        for (let i = 0; i < 16; i++) {
          if (this.numbers[i] === 0) {
            index = i
            break
          }
        }
      }
      console.log(index)
      this.numbers[index] = Math.random() < 0.9 ? 2 : 4
    }
    _reset() {
      this._init()
      // 随机添加两个数字
      this._randomAdd()
      this._randomAdd()
      wepy.removeStorageSync('game')
    }
    // 矩阵转置
    _T (arr, n) {
      n = n % 4
      if (n === 0) return arr
      let l = arr.length
      let d = Math.sqrt(l)
      let tmp = []
      for (let i = 0; i < d; i += 1) {
        for (let j = 0; j < d; j += 1) {
          tmp[d - i - 1 + j * d] = arr[i * d + j]
        }
      }
      if (n > 1) tmp = this._T(tmp, n - 1)
      return tmp
    }

    // 滑动后合并滑块
    _move (i) {
      let temp = this._T(this.numbers, i)
      let move = false
      let hasCombin = {}
      temp.forEach((j, k) => {
        while (k % 4 && j !== 0) {
          if (temp[k - 1] === 0) { // 当前位置的前一位置为空,交换俩位置
            temp[k - 1] = j
            temp[k] = 0
            move = true
            if (hasCombin[k]) {
              hasCombin[k - 1] = true
              hasCombin[k] = false
            }
          } else if (temp[k - 1] === j && !hasCombin[k] && !hasCombin[k - 1]) {
            // 当前位置与前一位置数字相同，合并到前一位置，然后清空当前位置
            j *= 2
            temp[k - 1] = j
            temp[k] = 0
            move = true
            hasCombin[k - 1] = true  // 记录合并位置
            this.recentScore += j // 加分
          } else {
            break
          }
          k--
        }
      })
      this.numbers = this._T(temp, 4 - i) // 转置回去，把数据还给this.nums
      if (move) {
        this._randomAdd()
      }
    }

    _saveGame () {
      let obj = {
        numbers: this.numbers,
        recentScore: this.recentScore
      }
      wepy.setStorage({
        key: 'game',
        data: JSON.stringify(obj)
      })
    }

    _isPass () {
      let isOver = true
      let isPass = false
      let hasSpace = false
      let temp = this._T(this.numbers, 1)
      this.numbers.forEach((item, index) => {
        if (this.numbers[index - 4] === item || this.numbers[index + 4] === item || temp[index - 4] === temp[index] || temp[index + 4] === temp[index]) {
          isOver = false
        }
        if (item === 2048) {
          isPass = true
        }
        if (item === 0) {
          hasSpace = true
        }
      })
      if (isPass) {
        console.log('congratulation')
        wepy.showModal({
          title: '已经达到2048',
          content: '是否继续',
          confirmText: '是',
          cancelText: '否'
        }).then((res) => {
          console.log(res)
          if (res.cancel) {
            this._reset()
          }
        })
      }
      if (isOver && !hasSpace) {
        console.log('game over')
        wepy.showModal({
          title: 'Game Over',
          content: '游戏结束',
          showCancel: false
        }).then((res) => {
          console.log(res)
          if (res.confirm) {
            this._reset()
          }
        })
      }
    }

    onLoad () {
      wepy.getStorage({key: 'game'}).then((res) => {
        let obj = JSON.parse(res.data)
        this.numbers = obj.numbers
        this.recentScore = obj.recentScore
        this.bestScore = wepy.getStorageSync('bestScore')
        this.$apply()
      }).catch((err) => {
        this._init()
        // 随机添加两个数字
        this._randomAdd()
        this._randomAdd()
        this.$apply()
        console.log(err)
      })
    }

    methods = {
      reset () {
        this._reset()
      },
      handleTouchStart (e) {
        this.scrollData.start = {x: e.touches[0].pageX, y: e.touches[0].pageY}
      },
      handleTouchEnd (e) {
        this.scrollData.end = {x: e.changedTouches[0].pageX, y: e.changedTouches[0].pageY}
        // 横纵坐标差值
        let diffX = this.scrollData.start.x - this.scrollData.end.x
        let diffY = this.scrollData.start.y - this.scrollData.end.y
        console.log(diffX, diffY)
        // 防误触
        if (Math.abs(diffX) < 30 && Math.abs(diffY) < 30) {
          return
        }
        // 判断左右滑动和垂直滑动的差值
        if (Math.abs(diffX) >= Math.abs(diffY)) {
          if (diffX > 0) {
            console.log('左')
            this._move(0)
          } else {
            console.log('右')
            this._move(2)
          }
        } else {
          if (diffY > 0) {
            console.log('上')
            this._move(3)
          } else {
            console.log('下')
            this._move(1)
          }
        }
        if (this.recentScore > this.bestScore) {
          this.bestScore = this.recentScore
          wepy.setStorage({
            key: 'bestScore',
            data: this.recentScore
          })
        }
        this._saveGame()
        this._isPass()
      }
    }
  }
</script>
